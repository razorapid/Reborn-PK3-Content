/**
 Medal of Honor: Allied Assault v1.12 REBORN  -  Morpheus Script
 ================================================================
 REBORN FRAMEWORK MAINFRAME; 				Script Framework BETA 
 ================================================================
 BY Sor
 VERSION 1.0.13 (30/11/2012)
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net | www.mohaairborne.co.cc
 ================================================================
*/
// All debug must be centralized and localized (i.e. available in multiple translations)
// Same goes for all non-console text output the framework may produce.
/********************************************************************************************************
						I	N	I	T	I	A	L	I	Z	A	T	I	O	N
******************************************************************************************************* */
main:
	conprintf "\nINFO[REBORN_FRAMEWORK::main]: START INITIALIZATION PROCESS of REBORN Scripting Framework.\n\n";
	
	/*********************************** */
	level.EVENT = 5;		/*PrePrespawn*/
	/*wait*/thread PrePrespawn;
	
	/******************************** */
	level waittill prespawn;
	level.EVENT = 4;		/*Prespawn*/
	if (level.DEBUG) {
		conprintf ("INFO[REBORN_FRAMEWORK::main]: from loader to prespawn event: " + (level.time - game.SCRTIME) + " seconds; clocked internally at " + level.time + ".\n");
	}
	game.SCRTIME = level.time;

	/***************************** */
	level waittill spawn;
	level.EVENT = 3;		/*Spawn*/
	if (level.DEBUG) {
		conprintf ("INFO[REBORN_FRAMEWORK::main]: from prespawn to spawn event: " + (level.time - game.SCRTIME) + " seconds; clocked internally at " + level.time + ".\n");
	}
	game.SCRTIME = level.time;

	/********************************* */
	level waittill postthink;
	level.EVENT = 2;		/*Postthink*/
	if (level.DEBUG) {
		conprintf ("INFO[REBORN_FRAMEWORK::main]: from spawn to postthink event: " + (level.time - game.SCRTIME) + " seconds; clocked internally at " + level.time + ".\n");
	}
	game.SCRTIME = level.time;
	/* 	|
		| This could potentially last a long time.. Should we take advantage of it to run maintenance etc??
		|
		v		*/
	/*********************************** */
	level waittill playerspawn;
	level.EVENT = 1;		/*Playerspawn*/
	if (level.DEBUG) {
		conprintf ("INFO[REBORN_FRAMEWORK::main]: from postthink to playerspawn event: " + (level.time - game.SCRTIME) + " seconds; clocked internally at " + level.time + ".\n");
	}
	game.SCRTIME = level.time;


	// $Map has hacked and simulated the map/rotation system by now, so gametype is by default 4=obj (when no players) and 2=tdm (when players). Handle by default roundstart:
	//waitthread Waittill_RoundStart;
	level.EVENT = NIL;		/*no more level events*/
	if (level.DEBUG) {
		conprintf ("INFO[REBORN_FRAMEWORK::main]: from playerspawn to roundstart: " + (level.time - game.SCRTIME) + " seconds; clocked internally at " + level.time + ".\n");
	}
	
	// SCRTIME has been saved in $System.time by now:
	game.SCRTIME = NIL;

	conprintf ("\nINFO[REBORN_FRAMEWORK::main]: FINISHED INITIALIZATION PROCESS of REBORN Scripting Framework " + $System.version + ".\n\n");
end;

/********************************************************************************************************
							P	R	E	-	P	R	E	S	P	A	W	N
******************************************************************************************************* */
/// Add check after class definitions later... also need to address the issue of targetname overlap and entity arrays
PrePrespawn:
	/*TEMP*/ level waittill prespawn /*TEMP*/
	if !($System) {
		// Initialize the Root class.
		waitthread InitializeSystem;
		
		/*TEMP*/
		$System waitthread #DefineClass "Event" 	($System.filePath + "event/mainhandler.scr"); 	$System.Event = $Event;
		$System waitthread #DefineClass "Library" 	($System.filePath + "lib/libraries.scr"); 		$System.Library = $Library;
		/*TEMP*/
	}
end;

// CONSTANTS SHOULD BE IN CAPS
InitializeSystem:
	// Create root class object:
	game.Root = local CreateListener; 
	// It shall be named 'System'!
	game.Root targetname "System";
	
	// System has officially booted at <internal level timestamp>.
	game.Root.time = level.time;
	
	// System is root class.
	game.Root.isRoot = 				true;
	game.Root.parent = 				NIL;
	game.Root.children[0] = 		NIL;
	
	// 'System' specifics:
	game.Root.fullPath = 			"reborn/framework/framework.scr";
	game.Root.filePath = 			"reborn/framework/";
	game.Root.fileName = 			"framework.scr";
	game.Root.initThread = 			"main";
	game.Root.version = 			"1.0.15 BETA"
	game.Root.development = 		"BETA"
	game.Root.baseVersion = 		"1.0"
	game.Root.revision	=			"15"
	// Root-specific:
	game.Root.loader = 				"reborn/reborn_loader.scr";
	game.Root.cache = 				"reborn/framework/cache/";
	
	// System property size:
	game.Root.pSize = 36;
	// System method size:
	game.Root.mSize = 0;
	
	// Critital system function references:
	// 
	
	// define crucial values
	game.Root.PULSE_HIGHPRIOR = 	0.001		// 1ms for high-frequency, fast looping without the risk of crashing the server.
	game.Root.PULSE_MEDIUMPRIOR = 	0.05;		//assuming server framerate is 20; need to use sv_framerate and if clientside patch arrives, also cg_framerate
	game.Root.PULSE_LOWPRIOR = 		1.0;		//speed for low priority loops.
	game.Root.CAP_VAR = 			1024;
	game.Root.CAP_HASHVAR = 		1024;
	game.Root.CAP_ARRAYVAR = 		4096;
	game.Root.CAP_STRINGBUFFER = 	522234; 	//about half a MiByte, or 522 234 characters.
	game.Root.CAP_RENDERED_ENTS = 	1024-1; 	//free edicts cap; should it be int(MAXCLIENTS) lower? To ensure a connecting player doesn't crash the server this way.
	game.Root.CAP_INVISIBLE_ENTS = 	8192; 		//arbitrary user-defined cap on invisible, simple ents.. no one really knows what the real limit is
	game.Root.edictCounter = 	0; 				//check mapregister or search (in background!) in bsp for complex entities and update mapregister with data
												//waitthread $Map.GetMapBSPData(<mode:extract/count data> <flags: 1=world;2=info;4=renderedEnts;8=simpleEnts;16=allEnts;32=doors;64=windows;128=(path)nodes;256=spawnpoints;512=ladder info;1024=targetnamedEnts...> 
												//[INT output:all info or just the origin] [STRING specific searchStr?]) 
end;

/********************************************************************************************************
									P	R	E	S	P	A	W	N
******************************************************************************************************* */
Prespawn:

end;

/********************************************************************************************************
										S	P	A	W	N
******************************************************************************************************* */
Spawn:

end;
/********************************************************************************************************
								P	O	S	T	T	H	I	N	K
******************************************************************************************************* */
Postthink:

end;
/********************************************************************************************************
							P	L	A	Y	E	R	S	P	A	W	N
******************************************************************************************************* */
Playerspawn:

end;

/* Create classes here and __init threads of main classes are executed.
They will receive it as 'self' and should store it in a level variable.
Seperate init thread for $System/root class.
*/
/**
Every function, public or private/internal, that creates/relies on an (usually unrendered) entity (such as SimpleEntity, Listener & SimpleArchivedEntity) as functional datastructure 
has the prefix # in the function name.
Every function, public or private/internal, that registers/saves data or define/sets something like datastructs/variables/settings with cache update has the prefix @ as function name.
The cache function requires an addition scriptpath (of caller) argument. If no scriptpath is given, the __info thread of caller is called. If that is not found, abort the sequence. 
You can also overload it with cache-options object. The data will be initiated right now and saved in $LocalStorage to be written to appropriate file during intermission. 
What also happens during intermission is the commands, that called the caching function are traced in their respective scripts, are surgicaly removed (check ; first then \n). 
(OR USER NEED TO THOSE FUNCTIONS ONLY IF $LocalStorage TURNS UP NOTHING.) That way, next round, no redundant cache request will occur and the data can be loaded from $LocalStorage at all times from then on.

Periods like Pre-Prespawn to Spawn and Intermission are the only times the framework can run post- and pre-processing sequences and update/self-organise itself during a map.
*/
// only for custom classes...?
@DefineClass local.name local.path local.init local.scriptPath local.cacheFormat local.cacheFile:

end local.result;

#DefineClass local.name local.path local.dontInit:
	/*Error & Exception Handling*/
	if !(local.name) {
		if (level.DEBUG) {
			conprintf "\n ~^~^~^~ FATAL_ERROR[REBORN_FRAMEWORK::#DefineClass]: No class ent targetname <arg1> specified! ~^~^~^~ \n\n"; 
		}
		end false;
	} if !(local.path) {
		if (level.DEBUG) {
			conprintf "\n ~^~^~^~ FATAL_ERROR[REBORN_FRAMEWORK::#DefineClass]: No class path <arg2> specified! ~^~^~^~ \n\n"; 
		}
		end false;
	}
	
	// Assumes user is not an idiot and is only set to false if things go wrong.
	local.result = true;
	
	// Create SimpleArchivedEntity to store class in. This particular entity class is primitive 
	// enough to not contribute to the free edicts cap, yet advanced enough to be targetnamed,
	// making it a perfect object datastructure.
	if !($(local.name)) {
		local.class = local CreateListener;
		local.class targetname local.name;
	
		// Check if argument 'path' also contains a threadlabel specification.
		if (typeof local.path == "const array") {
			local.class.initThread = local.path[2];
			
			// Override array..
			local.xPath = local.path[1];
			local.path = NIL;
			local.path = local.xPath;
			local.xPath = NIL;
		} else {
			// Default initialization threadlabel;
			local.class.initThread = "__init";	
		}
		
		local.class.fullPath = local.path;
		// Obtains from given path, the file path and filename seperately.
		local.tmp = waitthread __SplitPath local.path;
		local.class.filePath = local.tmp[0];
		local.class.fileName = local.tmp[1];
		local.tmp = NIL;
		
		// The parent class of which this is a subclass.
		if (self) {
			local.class.parent = self.targetname;
		// This class appears to be a primary class.
		} else { 
			local.class.parent = "System";
		}
		
		// Set current class as child of given parent class.
		self.children[self.children.size] = local.class.targetname;
		// Initialize array for this class's potential children.
		local.class.children[0] = NIL;
		
		// $System is the one and only root class.
		local.class.isRoot = false;
		
		// .mSize designates the 'Method Size' (i.e. number of public methods) of the class.
		local.class.methodSize = 0;
		// .pSize designates the 'Property Size' (i.e. number of properties) of the class.
		local.class.propertySize = 7;
		
		// TEMPORARY !!!!
		local.class.fileMD5 = md5file ("main/" + local.class.fullPath);
		
		// If necessary, this will automatically execute the class' initialization thread
		// and finalize this class' creation sequence.
		if !(local.dontInit) {
			local.class thread local.class.fullPath::local.class.initThread;
		}
	} else {
		if (level.DEBUG) {
			conprintf "\n ~^~^~^~ FATAL_ERROR[REBORN_FRAMEWORK::#DefineClass]: Class entity \"" local.name "\" already exists! ~^~^~^~ \n\n"; 
		}
		local.result = !local.result;
	}
end local.result;

__SplitPath local.path:
	local.result[0] = ""; 	//filePath
	local.result[1] = ""; 	//fileName
	for (local.i = (local.path.size - 1); local.i >= 0; local.i--) {
		if (local.path[local.i] == "/") {
			for (local.j = (local.i + 1); local.j < local.path.size; local.j++) {
				local.result[1] += string(local.path[local.j]);
			}
			
			for (local.j = 0; local.j <= local.i; local.j++) {
				local.result[0] += string(local.path[local.j]);
			}
			end local.result;
		}
	}
	
	// Base directory?
	local.result[0] = "/";
	local.result[1] = local.path;
end local.result;

__LsRoot:
	if ($System) {
		conprintf "\n*~*~*~*~* REBORN FRAMEWORK'S Root & $System CLASS TREE *~*~*~*~*\n\n\n"
		conprintf ("\tstruct game.Root\n");
		conprintf ("\t{\n");
		waitthread __LsRoot__ $System "\t\t$";
		conprintf ("\t}\n");
		conprintf ("\n\tgame.Root.subClasses\n");
		conprintf ("\t{\n");
		waitthread __LsRoot2__ $System "\t\t$"
		conprintf ("\t}\n");
		conprintf "\n\n*~*~*~*~*~*~*~*~*~*~*~* $System CLASS TREE *~*~*~*~*~*~*~*~*~*~*\n\n"
	}
end;
__LsRoot__ local.currentClass local.prefix:
	local.arraySize = local.currentClass.children.size;
	if (local.arraySize > 0) {
		local.prefix += (local.currentClass.targetname + ".")
		conprintf (local.prefix + "\n");
		for (local.i = 0; local.i < local.arraySize; local.i++) {
			waitthread __LsRoot__ $(local.currentClass.children[local.i]) local.prefix;
		}
	} else {
		conprintf (local.prefix + local.currentClass.targetname + "\n");
	}
end;
__LsRoot2__ local.currentClass local.prefix:
	local.arraySize = local.currentClass.children.size;
	conprintf (local.prefix + local.currentClass.targetname + /*"\t\t children=" + local.arraySize +*/"\n");
	if (local.arraySize > 0) {
		for (local.i = 0; local.i < local.arraySize; local.i++) {
			waitthread __LsRoot2__ $(local.currentClass.children[local.i]) local.prefix;
		}
	}
end;