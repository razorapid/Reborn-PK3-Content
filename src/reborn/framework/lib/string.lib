/**
 Medal of Honor: Allied Assault v1.12 REBORN  -  Morpheus Script
 ================================================================
 STRING INFORMATION LIBRARY; 				Script Framework BETA 
 ================================================================
 BY Sor
 VERSION 1.2.21 (21/01/2013)
 =-------------------------------------------------------------=		
 Copyright (c) 2008-2014  Lenny Knockx
 All rights reserved.
 =-------------------------------------------------------------=
 Permission to use, copy, modify, and/or distribute this software 
 for any purpose with or without fee is hereby granted, provided 
 that the above copyright notice and this permission notice appear
 in all copies.
 ---------------
 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
 WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
 WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL 
 THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR 
 CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM 
 LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, 
 NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR 
 IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 =-------------------------------------------------------------=
 CONTACT: 	http://www.x-null.net/forums/member.php?185-Sor
 WEBSITE: 	http://www.x-null.net | www.mohaairborne.co.cc
 ================================================================
*/
__info:
	local.inf["library"] = "string.lib";	//filename
	local.inf["namespace"] = "Str";			//targetname of class this script is part of...
	local.inf["title"] = "STRING INFORMATION LIBRARY";
	local.inf["version"] = "1.2.21";
	local.inf["lastmodified"] = "21/01/2013";
	local.inf["authors"][0] = "Sor";
end local.inf;

/// ********************************************************* ///
///						L	I	S	T	S					  ///
/// ********************************************************* ///

BadCharData:
	local.constArray = "/"::"\\"::"?"::"%"::"*"::":"::"|"::"\""::">"::"<"::" ";
end local.constArray;

DecimalData:
	local.constArray = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"::"8"::"9";
end local.constArray;

BinaryData:
	local.constArray = 	"0"::"1";
end local.constArray;

OctalData:
	local.constArray = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7";
end local.constArray;

HexadecimalData:
	local.constArray = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"::"8"::"9" \
						::"A"::"B"::"C"::"D"::"E"::"F"::"a"::"b"::"c"::"d" \
						::"e"::"f";
end local.constArray;

SafeCharData:
	local.constArray = "a"::"b"::"c"::"d"::"e"::"f"::"g"::"h"::"i"::"j"::"k" \
						::"l"::"m"::"n"::"o"::"p"::"q"::"r"::"s"::"t"::"u"::"v" \
						::"w"::"x"::"y"::"z"::"A"::"B"::"C"::"D"::"E"::"F"::"G" \
						::"H"::"I"::"J"::"K"::"L"::"M"::"N"::"O"::"P"::"Q"::"R" \
						::"S"::"T"::"U"::"V"::"W"::"X"::"Y"::"Z"::"0"::"1"::"2" \
						::"3"::"4"::"5"::"6"::"7"::"8"::"9"::"."::"-"::"_"::";";
end local.constArray;

LowerCaseData:
	local.constArray = "a"::"b"::"c"::"d"::"e"::"f"::"g"::"h"::"i"::"j"::"k" \
						::"l"::"m"::"n"::"o"::"p"::"q"::"r"::"s"::"t"::"u"::"v" \
						::"w"::"x"::"y"::"z";
end local.constArray;

UpperCaseData:
	local.constArray = "A"::"B"::"C"::"D"::"E"::"F"::"G"::"H"::"I"::"J"::"K" \
						::"L"::"M"::"N"::"O"::"P"::"Q"::"R"::"S"::"T"::"U"::"V" \
						::"W"::"X"::"Y"::"Z";
end local.constArray;

TitleExceptions:
	local.constArray = "the"::"a"::"an"::"for"::"and"::"from"::"nor"::"but" \
						::"or"::"of"::"to"::"in"::"on"::"with"::"yet"::"so" \
						::"as"::"by"::"at"::"if"::"when"::"while"::"because" \
						::"after"::"both"::"either"::"neither"::"although";
end local.constArray;


/// ********************************************************* ///
///						M	A	S	K	S					  ///
/// ********************************************************* ///

NumericalMasks:
	local.mask["0"] = 1;
	local.mask["1"] = 1;
	local.mask["2"] = 1;
	local.mask["3"] = 1;
	local.mask["4"] = 1;
	local.mask["5"] = 1;
	local.mask["6"] = 1;
	local.mask["7"] = 1;
	local.mask["8"] = 1;
	local.mask["9"] = 1;
	/* local.mask["__info"] = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"::"8"::"9" */;	
end local.mask

DecimalDataMasks:
	local.mask["0"] = 0;
	local.mask["1"] = 1;
	local.mask["2"] = 2;
	local.mask["3"] = 3;
	local.mask["4"] = 4;
	local.mask["5"] = 5;
	local.mask["6"] = 6;
	local.mask["7"] = 7;
	local.mask["8"] = 8;
	local.mask["9"] = 9;
	/* local.mask["__info"] = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"::"8"::"9"; */	
end local.mask;

BinaryDataMasks:
	local.mask["0"] = 0;
	local.mask["1"] = 1;
	/* local.mask["__info"] = "0"::"1"; */
end local.mask;

OctalDataMasks:
	local.mask["0"] = 0;
	local.mask["1"] = 1;
	local.mask["2"] = 2;
	local.mask["3"] = 3;
	local.mask["4"] = 4;
	local.mask["5"] = 5;
	local.mask["6"] = 6;
	local.mask["7"] = 7;
	/* local.mask["__info"] = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"; */
end local.mask;

HexadecimalDataMasks:
	local.mask["0"] = 0;
	local.mask["1"] = 1;
	local.mask["2"] = 2;
	local.mask["3"] = 3;
	local.mask["4"] = 4;
	local.mask["5"] = 5;
	local.mask["6"] = 6;
	local.mask["7"] = 7;
	local.mask["8"] = 8;
	local.mask["9"] = 9;
	local.mask["A"] = 10;
	local.mask["B"] = 11;
	local.mask["C"] = 12;
	local.mask["D"] = 13;
	local.mask["E"] = 14;
	local.mask["F"] = 15;
	local.mask["a"] = 10;
	local.mask["b"] = 11;
	local.mask["c"] = 12;
	local.mask["d"] = 13;
	local.mask["e"] = 14;
	local.mask["f"] = 15;
	/* local.mask["__info"] = "0"::"1"::"2"::"3"::"4"::"5"::"6"::"7"::"8"::"9"::"A"::"B"::"C"::"D"::"E"::"F"::"a"::"b"::"c"::"d"::"e"::"f"; */	
end local.mask;

LetterDataMasks:
	local.mask["a"] = 1;
	local.mask["b"] = 1;
	local.mask["c"] = 1;
	local.mask["d"] = 1;
	local.mask["e"] = 1;
	local.mask["f"] = 1;
	local.mask["g"] = 1;
	local.mask["h"] = 1;
	local.mask["i"] = 1;
	local.mask["j"] = 1;
	local.mask["k"] = 1;
	local.mask["l"] = 1;
	local.mask["m"] = 1;
	local.mask["n"] = 1;
	local.mask["o"] = 1;
	local.mask["p"] = 1;
	local.mask["q"] = 1;
	local.mask["r"] = 1;
	local.mask["s"] = 1;
	local.mask["t"] = 1;
	local.mask["u"] = 1;
	local.mask["v"] = 1;
	local.mask["w"] = 1;
	local.mask["x"] = 1;
	local.mask["y"] = 1;
	local.mask["z"] = 1;
	local.mask["A"] = 2;
	local.mask["B"] = 2;
	local.mask["C"] = 2;
	local.mask["D"] = 2;
	local.mask["E"] = 2;
	local.mask["F"] = 2;
	local.mask["G"] = 2;
	local.mask["H"] = 2;
	local.mask["I"] = 2;
	local.mask["J"] = 2;
	local.mask["K"] = 2;
	local.mask["L"] = 2;
	local.mask["M"] = 2;
	local.mask["N"] = 2;
	local.mask["O"] = 2;
	local.mask["P"] = 2;
	local.mask["Q"] = 2;
	local.mask["R"] = 2;
	local.mask["S"] = 2;
	local.mask["T"] = 2;
	local.mask["U"] = 2;
	local.mask["V"] = 2;
	local.mask["W"] = 2;
	local.mask["X"] = 2;
	local.mask["Y"] = 2;
	local.mask["Z"] = 2;
	/* local.mask["__info"] = "a"::"b"::"c"::"d"::"e"::"f"::"g"::"h"::"i"::"j"::"k"::"l"::"m"::"n"::"q"::"r"::"s"::"t"::"u"::"v"::"w"::"x"::"y"::"z"::"A"::"B"::"C"::"D"::"E"::"F"::"G"::"H"::"I"::"J"::"K"::"M"::"N"::"O"::"P"::"Q"::"R"::"S"::"T"::"U"::"V"::"W"::"X"::"Y"::"Z"; */
end local.mask;

CharDataMasks local.selection:
	// lowercase -> UPPERCASE
	if ((local.selection == NIL) || (local.selection == 0)) {
		local.mask["a"] = "A";
		local.mask["b"] = "B";
		local.mask["c"] = "C";
		local.mask["d"] = "D";
		local.mask["e"] = "E";
		local.mask["f"] = "F";
		local.mask["g"] = "G";
		local.mask["h"] = "H";
		local.mask["i"] = "I";
		local.mask["j"] = "J";
		local.mask["k"] = "K";
		local.mask["l"] = "L";
		local.mask["m"] = "M";
		local.mask["n"] = "N";
		local.mask["o"] = "O";
		local.mask["p"] = "P";
		local.mask["q"] = "Q";
		local.mask["r"] = "R";
		local.mask["s"] = "S";
		local.mask["t"] = "T";
		local.mask["u"] = "U";
		local.mask["v"] = "V";
		local.mask["w"] = "W";
		local.mask["x"] = "X";
		local.mask["y"] = "Y";
		local.mask["z"] = "Z";
	}
	// UPPERCASE -> lowercase
	if ((local.selection == NIL) || (local.selection == 1)) {
		local.mask["A"] = "a";
		local.mask["B"] = "b";
		local.mask["C"] = "c";
		local.mask["D"] = "d";
		local.mask["E"] = "e";
		local.mask["F"] = "f";
		local.mask["G"] = "g";
		local.mask["H"] = "h";
		local.mask["I"] = "i";
		local.mask["J"] = "j";
		local.mask["K"] = "k";
		local.mask["L"] = "l";
		local.mask["M"] = "m";
		local.mask["N"] = "n";
		local.mask["O"] = "o";
		local.mask["P"] = "p";
		local.mask["Q"] = "q";
		local.mask["R"] = "r";
		local.mask["S"] = "s";
		local.mask["T"] = "t";
		local.mask["U"] = "u";
		local.mask["V"] = "v";
		local.mask["W"] = "w";
		local.mask["X"] = "x";
		local.mask["Y"] = "y";
		local.mask["Z"] = "z";
	}
end local.mask;

ASCIIDataMasks:
	/// 'Non-printable' characters
	/// http://www.asciitable.com/
	
	//local.ascii[0] = 0; 	/**NULL character; can't use null character in script :p*/
	local.ascii[1] = ; 	/**Start of Header*/
	local.ascii[2] = ; 	/**Start of Text*/
	local.ascii[3] = ; 	/**End of Text*/
	local.ascii[4] = ; 	/**End of Transmission*/
	local.ascii[5] = ; 	/**Enquiry*/
	local.ascii[6] = ; 	/**Acknowledge*/
	local.ascii[7] = ; 	/**Bell*/
	local.ascii[8] = ;  	/**Backspace*/
	local.ascii[9] = "\t";	/**Horizontal TAB*/
	local.ascii[10] = "\n"; /**Line Feed/New Line*/
	local.ascii[11] = ;	/**Vertical TAB; bizarrely, this prints the symbol for the male gender? :p*/
	local.ascii[12] = ;	/**Form Feed/New page; bizarrely, this prints the symbol for the female gender? :p*/
	local.ascii[13] = "\n"	/**Carriage Return; unfortunately, the escape sequence '\r' doesn't work in MoHAA.*/
	local.ascii[14] = ;	/**Shift OUT; prints musical note? :p*/
	local.ascii[15] = ;	/**Shift IN*/
	local.ascii[16] = ;	/**Data Link Escape*/
	local.ascii[17] = ;	/**Device Control 1*/
	local.ascii[18] = ;	/**Device Control 2*/
	local.ascii[19] = ;	/**Device Control 3*/
	local.ascii[20] = ;	/**Device Control 4*/
	local.ascii[21] = ;	/**Negative Acknowledgement*/
	local.ascii[22] = ;	/**Synchronous Idle*/
	local.ascii[23] = ;	/**End of Transmission Block*/
	local.ascii[24] = ;	/**Cancel*/
	local.ascii[25] = ;	/**End of Medium*/
	local.ascii[26] = ;	/**Substitute*/
	local.ascii[27] = ;	/**Escape*/
	local.ascii[28] = ;	/**File Seperator*/
	local.ascii[29] = ;	/**Group Seperator*/
	local.ascii[30] = ;	/**Record Seperator*/
	local.ascii[31] = ;	/**Unit Seperator*/
	
	local.ascii[32] = " ";
	local.ascii[33] = "!";
	local.ascii[34] = "\"";
	local.ascii[35] = "#";
	local.ascii[36] = "$";
	local.ascii[37] = "%";
	local.ascii[38] = "&";
	local.ascii[39] = "'";
	local.ascii[40] = "(";
	local.ascii[41] = ")";
	local.ascii[42] = "*";
	local.ascii[43] = "+";
	local.ascii[44] = ",";
	local.ascii[45] = "-";
	local.ascii[46] = ".";
	local.ascii[47] = "/";
	local.ascii[48] = "0";
	local.ascii[49] = "1";
	local.ascii[50] = "2";
	local.ascii[51] = "3";
	local.ascii[52] = "4";
	local.ascii[53] = "5";
	local.ascii[54] = "6";
	local.ascii[55] = "7";
	local.ascii[56] = "8";
	local.ascii[57] = "9";
	local.ascii[58] = ":";
	local.ascii[59] = ";";
	local.ascii[60] = "<";
	local.ascii[61] = "=";
	local.ascii[62] = ">";
	local.ascii[63] = "?";
	
	local.ascii[64] = "@";
	local.ascii[65] = "A";
	local.ascii[66] = "B";
	local.ascii[67] = "C";
	local.ascii[68] = "D";
	local.ascii[69] = "E";
	local.ascii[70] = "F";
	local.ascii[71] = "G";
	local.ascii[72] = "H";
	local.ascii[73] = "I";
	local.ascii[74] = "J";
	local.ascii[75] = "K";
	local.ascii[76] = "L";
	local.ascii[77] = "M";
	local.ascii[78] = "N";
	local.ascii[79] = "O";
	local.ascii[80] = "P";
	local.ascii[81] = "Q";
	local.ascii[82] = "R";
	local.ascii[83] = "S";
	local.ascii[84] = "T";
	local.ascii[85] = "U";
	local.ascii[86] = "V";
	local.ascii[87] = "W";
	local.ascii[88] = "X";
	local.ascii[89] = "Y";
	local.ascii[90] = "Z";
	local.ascii[91] = "[";
	local.ascii[92] = "\\";
	local.ascii[93] = "]";
	local.ascii[94] = "^";
	local.ascii[95] = "_";
	local.ascii[96] = "`";
	
	local.ascii[97] = "a";
	local.ascii[98] = "b";
	local.ascii[99] = "c";
	local.ascii[100] = "d";
	local.ascii[101] = "e";
	local.ascii[102] = "f";
	local.ascii[103] = "g";
	local.ascii[104] = "h";
	local.ascii[105] = "i";
	local.ascii[106] = "j";
	local.ascii[107] = "k";
	local.ascii[108] = "l";
	local.ascii[109] = "m";
	local.ascii[110] = "n";
	local.ascii[111] = "o";
	local.ascii[112] = "p";
	local.ascii[113] = "q";
	local.ascii[114] = "r";
	local.ascii[115] = "s";
	local.ascii[116] = "t";
	local.ascii[117] = "u";
	local.ascii[118] = "v";
	local.ascii[119] = "w";
	local.ascii[120] = "x";
	local.ascii[121] = "y";
	local.ascii[122] = "z";
	local.ascii[123] = "{";
	local.ascii[124] = "|";
	local.ascii[125] = "}";
	local.ascii[126] = "~";
end local.ascii;


/// ********************************************************* ///
///				S	W	I	T	C	H	E	S				  ///
/// ********************************************************* ///

IsDecimalData local.var:
	switch (local.var) {
		case "0":
			local.result = "0";
		break;
		case "1":
			local.result = "1";
		break;
		case "2":
			local.result = "2";
		break;
		case "3":
			local.result = "3";
		break;
		case "4":
			local.result = "4";
		break;
		case "5":
			local.result = "5";
		break;
		case "6":
			local.result = "6";
		break;
		case "7":
			local.result = "7";
		break;
		case "8":
			local.result = "8";
		break;
		case "9":
			local.result = "9";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsBinaryData local.var:
	switch (local.var) {
		case "0":
			local.result = "0";
		break;
		case "1":
			local.result = "1";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsOctalData local.var:
	switch (local.var) {
		case "0":
			local.result = "0";
		break;
		case "1":
			local.result = "1";
		break;
		case "2":
			local.result = "2";
		break;
		case "3":
			local.result = "3";
		break;
		case "4":
			local.result = "4";
		break;
		case "5":
			local.result = "5";
		break;
		case "6":
			local.result = "6";
		break;
		case "7":
			local.result = "7";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsHexadecimalData local.var:
	switch (local.var) {
		case "0":
			local.result = "0";
		break;
		case "1":
			local.result = "1";
		break;
		case "2":
			local.result = "2";
		break;
		case "3":
			local.result = "3";
		break;
		case "4":
			local.result = "4";
		break;
		case "5":
			local.result = "5";
		break;
		case "6":
			local.result = "6";
		break;
		case "7":
			local.result = "7";
		break;
		case "8":
			local.result = "8";
		break;
		case "9":
			local.result = "9";
		break;
		case "a":
		case "A":
			local.result = "A";
		break;
		case "b":
		case "B":
			local.result = "B";
		break;
		case "c":
		case "C":
			local.result = "C";
		break;
		case "d":
		case "D":
			local.result = "D";
		break;
		case "e":
		case "E":
			local.result = "E";
		break;
		case "f":
		case "F":
			local.result = "F";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsLetterData local.var:
	switch (local.var) {
		case "a":
			local.result = "a";
		break;
		case "b":
			local.result = "b";
		break;
		case "c":
			local.result = "c";
		break;
		case "d":
			local.result = "d";
		break;
		case "e":
			local.result = "e";
		break;
		case "f":
			local.result = "f";
		break;
		case "g":
			local.result = "g";
		break;
		case "h":
			local.result = "h";
		break;
		case "i":
			local.result = "i";
		break;
		case "j":
			local.result = "j";
		break;
		case "k":
			local.result = "k";
		break;
		case "l":
			local.result = "l";
		break;
		case "m":
			local.result = "m";
		break;
		case "n":
			local.result = "n";
		break;
		case "o":
			local.result = "o";
		break;
		case "p":
			local.result = "p";
		break;
		case "q":
			local.result = "q";
		break;
		case "r":
			local.result = "r";
		break;
		case "s":
			local.result = "s";
		break;
		case "t":
			local.result = "t";
		break;
		case "u":
			local.result = "u";
		break;
		case "v":
			local.result = "v";
		break;
		case "w":
			local.result = "w";
		break;
		case "x":
			local.result = "x";
		break;
		case "y":
			local.result = "y";
		break;
		case "z":
			local.result = "z";
		break;
		case "A":
			local.result = "A";
		break;
		case "B":
			local.result = "B";
		break;
		case "C":
			local.result = "C";
		break;		
		case "D":
			local.result = "D";
		break;		
		case "E":
			local.result = "E";
		break;		
		case "F":
			local.result = "F";
		break;		
		case "G":
			local.result = "G";
		break;		
		case "H":
			local.result = "H";
		break;		
		case "I":
			local.result = "I";
		break;		
		case "J":
			local.result = "J";
		break;		
		case "K":
			local.result = "K";
		break;		
		case "L":
			local.result = "L";
		break;		
		case "M":
			local.result = "M";
		break;		
		case "N":
			local.result = "N";
		break;		
		case "O":
			local.result = "O";
		break;		
		case "P":
			local.result = "P";
		break;		
		case "Q":
			local.result = "Q";
		break;		
		case "R":
			local.result = "R";
		break;		
		case "S":
			local.result = "S";
		break;		
		case "T":
			local.result = "T";
		break;		
		case "U":
			local.result = "U";
		break;		
		case "V":
			local.result = "V";
		break;		
		case "W":
			local.result = "W";
		break;		
		case "X":
			local.result = "X";
		break;		
		case "Y":
			local.result = "Y";
		break;		
		case "Z":
			local.result = "Z";
		break;
		default:		
			local.result = 0;
		break;
	}
end local.result;

IsEsc local.var:
	switch (local.var) {
		case "\n":
			local.result = "\n";
		break;
		case "\t":
			local.result = "\t";
		break;
		case "\"":
			local.result = "\"";
		break;
		case "\\":
			local.result = "\\";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsPunct local.var:
	switch (local.var) {
		case ".":
			local.result = ".";
		break;
		case ",":
			local.result = ",";
		break;
		case ":":
			local.result = ":";
		break;
		case ";":
			local.result = ";";
		break;
		case "?":
			local.result = ";";
		break;
		case "!":
			local.result = ";";
		break;
		case "\"":
			local.result = "\"";
		break;
		case "'":
			local.result = "'";
		break;
		case "-":
			local.result = "-";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsSymbol local.var:
	switch (local.var) {
		case ".":
			local.result = ".";
		break;
		case ",":
			local.result = ",";
		break;
		case ":":
			local.result = ":";
		break;
		case ";":
			local.result = ";";
		break;
		case "?":
			local.result = ";";
		break;
		case "!":
			local.result = ";";
		break;
		case "\"":
			local.result = "\"";
		break;
		case "'":
			local.result = "'";
		break;
		case "-":
			local.result = "-";
		break;
		case "&":
			local.result = "&";
		break; 
		case "|":
			local.result = "|";
		break;
		case "@":
			local.result = "@";
		break;
		case "#":
			local.result = "#";
		break;
		case "(":
			local.result = "(";
		break;
		case "^":
			local.result = "^";
		break;
		case "{":
			local.result = "{";
		break;
		case "}":
			local.result = "}";
		break;
		case ")":
			local.result = ")";
		break;
		case "[":
			local.result = "[";
		break;
		case "]":
			local.result = "]";
		break;
		case "$":
			local.result = "$";
		break;
		case "*":
			local.result = "*";
		break;
		case "%":
			local.result = "%";
		break;
		case "`":
			local.result = "`";
		break;
		case "+":
			local.result = "+";
		break;
		case "/":
			local.result = "/";
		break;
		case "\\":
			local.result = "\\";
		break;
		case "=":
			local.result = "=";
		break;
		case "~": 
			local.result = "~";
		break;
		case "<":
			local.result = "<";
		break;
		case ">":
			local.result = ">";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsLower local.var:
	switch (local.var) {
		case "a":
			local.result = "a";
		break;
		case "b":
			local.result = "b";
		break;
		case "c":
			local.result = "c";
		break;
		case "d":
			local.result = "d";
		break;
		case "e":
			local.result = "e";
		break;
		case "f":
			local.result = "f";
		break;
		case "g":
			local.result = "g";
		break;
		case "h":
			local.result = "h";
		break;
		case "i":
			local.result = "i";
		break;
		case "j":
			local.result = "j";
		break;
		case "k":
			local.result = "k";
		break;
		case "l":
			local.result = "l";
		break;
		case "m":
			local.result = "m";
		break;
		case "n":
			local.result = "n";
		break;
		case "o":
			local.result = "o";
		break;
		case "p":
			local.result = "p";
		break;
		case "q":
			local.result = "q";
		break;
		case "r":
			local.result = "r";
		break;
		case "s":
			local.result = "s";
		break;
		case "t":
			local.result = "t";
		break;
		case "u":
			local.result = "u";
		break;
		case "v":
			local.result = "v";
		break;
		case "w":
			local.result = "w";
		break;
		case "x":
			local.result = "x";
		break;
		case "y":
			local.result = "y";
		break;
		case "z":
			local.result = "z";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;

IsUpper local.var:
	switch (local.var) {
		case "A":
			local.result = "A";
		break;
		case "B":
			local.result = "B";
		break;
		case "C":
			local.result = "C";
		break;		
		case "D":
			local.result = "D";
		break;		
		case "E":
			local.result = "E";
		break;		
		case "F":
			local.result = "F";
		break;		
		case "G":
			local.result = "G";
		break;		
		case "H":
			local.result = "H";
		break;		
		case "I":
			local.result = "I";
		break;		
		case "J":
			local.result = "J";
		break;		
		case "K":
			local.result = "K";
		break;		
		case "L":
			local.result = "L";
		break;		
		case "M":
			local.result = "M";
		break;		
		case "N":
			local.result = "N";
		break;		
		case "O":
			local.result = "O";
		break;		
		case "P":
			local.result = "P";
		break;		
		case "Q":
			local.result = "Q";
		break;		
		case "R":
			local.result = "R";
		break;		
		case "S":
			local.result = "S";
		break;		
		case "T":
			local.result = "T";
		break;		
		case "U":
			local.result = "U";
		break;		
		case "V":
			local.result = "V";
		break;		
		case "W":
			local.result = "W";
		break;		
		case "X":
			local.result = "X";
		break;		
		case "Y":
			local.result = "Y";
		break;		
		case "Z":
			local.result = "Z";
		break;
		default:
			local.result = 0;
		break;
	}
end local.result;