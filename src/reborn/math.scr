/*
 ======================================================
 Reborn Patch 1.12; | MATHMATICAL FUNCTIONS |
 ======================================================
 by Sor, jv_map & veers
 =----------------------------------------------------=
 File Version: v1.1
 ======================================================
*/
main local.loadalt:
	if (level.PI == NIL)
		level.PI = 3.141592654
	
	level.MATHS[avg] = global/func_maths.scr::calcAvg
	level.MATHS[med] = global/func_maths.scr::calcMediaan
	level.MATHS[sin] = global/func_maths.scr::sin 
	level.MATHS[cos] = global/func_maths.scr::cos
	level.MATHS[tan] = global/func_maths.scr::tan 
	level.MATHS[vec_toangles] = global/func_maths.scr::vectors_toangles
	level.MATHS[arcsin] = global/func_maths.scr::arcsin
	level.MATHS[arccos] = global/func_maths.scr::arccos
	level.MATHS[sqrt] = global/func_maths.scr::sqrt
	level.MATHS[sqrt1] = global/func_maths.scr::sqrt1
	level.MATHS[cot] = global/func_maths.scr::cot
	level.MATHS[arctan] = global/func_maths.scr::arctan
	level.MATHS[arccot] = global/func_maths.scr::arccot
	level.MATHS[arctan] = global/func_maths.scr::atan2
	level.MATHS[encl_angle] = global/func_maths.scr::enclosed_angle
	level.MATHS[lin_interpolation] = global/func_maths.scr::linear_interpolation
	level.MATHS[rad] = global/func_maths.scr::radians
	level.MATHS[ln] = global/func_maths.scr::ln
	level.MATHS[log10] = global/func_maths.scr::log10
	level.MATHS[powint] = global/func_maths.scr::powint
	
	// Alternate methods
	if (local.loadalt) {
		level.MATHSalt[sin] = global/func_maths.scr::alt_sin 
		level.MATHSalt[cos] = global/func_maths.scr::alt_cos
		level.MATHSalt[tan] = global/func_maths.scr::alt_tan
		level.MATHSalt[arcsin] = global/func_maths.scr::alt_arcsin
		level.MATHSalt[arccos] = global/func_maths.scr::alt_arccos
		level.MATHSalt[sqrt] = global/func_maths.scr::alt_sqrt
	}
end

//-------------------------------------------------------------------
// Written (not so impressively) by: Sor
//-------------------------------------------------------------------
calcAvg local.array local.abs:
	local.sum = 0
	local.total = local.array.size

	for (local.i = 1; local.i <= local.total; local.i++) {
		if !(local.abs) {
			local.sum += local.array[local.i]
		} else {
			local.sum += abs(local.array[local.i])
		}
	}
end ( local.sum / local.total )


// Needs description comments;
calcMediaan local.array local.omitzero:
	// re-arrange; lowest values to highest
	local.barray[0] = 999999 * -1
	
	for (local.u = 1; local.u <= local.array.size; local.u++) {
		local.barray[local.u] = 999999
		for (local.i = 1; local.i <= local.array.size; local.i++) {
			if ( ( local.omitzero != 1 ) || ( local.omitzero == 1 && local.array[local.i] != 0 ) ) {
				if ( local.array[local.i] < local.barray[local.u] && local.array[local.i] > local.barray[(local.u - 1)]) {
					local.barray[local.u] = local.array[local.i]
				}
			}
		}
	}
	
	local.barray[0] = NIL
	
	// get middle slot
	local.m = int( local.barray.size / 2 )
	local.mi = ( (local.barray.size - 1) / 2 )
	// uneven total
	if ( local.m == local.mi ) {
		end local.barray[local.mi]
	// even total...
	} else if ( local.mi < local.m ) {
		local.avg = int( ( local.barray[local.m] + local.barray[(local.m - 1)] ) / 2 ) // +?
		end local.avg
	}
end 0


//-------------------------------------------------------------------
// Written by: jv_map
//-------------------------------------------------------------------

// sin(x), x in rad
sin local.x:
	if (level.PI == NIL)
		level.PI = 3.141592654
end (waitthread cos(local.x - 0.5 * level.PI))

// cos(x), x in rad
cos local.x:
	if (level.PI == NIL)
		level.PI = 3.141592654
		
	// reduce to [0,2pi]
	if(local.x > 2.0 * level.PI)
	{
	  local.x -= (int (local.x / (2.0 * level.PI))) * 2.0 * level.PI
	}
	else if(local.x < 0.0)
	{
	  local.x += ((int ( -local.x / (2.0 * level.PI))) + 1) * 2.0 * level.PI
	}   

	// reduce to [-pi,pi]
	if(local.x > level.PI)
	{
	  local.x -= 2.0 * level.PI
	}

	local.x2 = local.x * local.x
	local.x4 = local.x2 * local.x2
	local.x6 = local.x4 * local.x2
	local.x8 = local.x6 * local.x2

	// taylor series expansion
	local.cosx = 1.0 - 0.5 * local.x2 + 0.04167 * local.x4 - 0.00139 * local.x6 + 0.00002 * local.x8

	if(local.cosx < -1.0)
	{
	  local.cosx = -1.0
	}
	else if(local.cosx > 1.0)
	{
	  local.cosx = 1.0
	}

end local.cosx

// tan(x), x in rad, undefined for x = (1/2 + k) * PI with k arbitrary int
tan local.x:
end ((waitthread sin local.x) / (waitthread cos local.x))



// transforms vectors to angles (pitch,yaw,roll)
// unlike vector_toangles this also includes roll
vectors_toangles local.vec_fwd local.vec_lf:
	if (level.PI == NIL)
		level.PI = 3.141592654

   local.base_angles = vector_toangles local.vec_fwd
   
   local.base_fwd = local.vec_fwd
   local.base_lf = -1.0 * (angles_toleft local.base_angles)
   local.base_up = vector_cross local.base_fwd local.base_lf
   
   local.cos = local.vec_lf * local.base_lf
   
   if(abs local.cos < 0.8)
   {
      local.roll_angle = waitthread arccos local.cos
      
      if(local.vec_lf * local.base_up < 0.0)
      {
         local.roll_angle = -local.roll_angle
      }
   }
   else
   {
      // arccos inaccurate here
      // so just use arcsin instead
      // (far more sensitive in this region)
      local.sin = local.vec_lf * local.base_up
      
      local.roll_angle = waitthread arcsin local.sin
      
      if(local.cos < 0.0)
      {
         local.roll_angle = level.PI - local.roll_angle
      }
   }
   
   // convert to degrees
   local.roll_angle = local.roll_angle / level.PI * 180.0
   
   local.angles = local.base_angles
   local.angles[2] = local.roll_angle
end local.angles

// inverse sin
// somewhat inaccurate near +-0.5PI
arcsin local.x:
	if (level.PI == NIL)
		level.PI = 3.141592654

   if(local.x < -0.857 || local.x > 0.857)
   {
      // some 9th order approximation
      local.x3 = local.x * local.x * local.x
      local.x9 = local.x3 * local.x3 * local.x3
      
      local.out = local.x + (0.5 * level.PI - 1.0) * local.x9
   }
   else
   {
      local.x2 = local.x * local.x
      local.x3 = local.x2 * local.x
      local.x5 = local.x3 * local.x2
   
      // Taylor series expansion
      local.out = local.x + 0.1667 * local.x3 + 0.075 * local.x5
   }
end local.out

// inverse cos
arccos local.rad:
	if (level.PI == NIL)
		level.PI = 3.141592654
   local.result = 0.5 * level.PI - (waitthread arcsin local.rad)
end local.result 


// square-root
sqrt local.x:
	// sqrt(2)
	local.SQRT_2 = 1.4142135623730951

	// known values, how convenient
	if(local.x == 0.0)
	{
		local.result = 0.0
	}
	else if(local.x == 1.0)
	{
		local.result = 1.0
	}
	else if(local.x == 2.0)
	{
		local.result = local.SQRT_2
	}
	else if (local.x < 0.0)
	{
		// error
		println "ERROR[math::sqrt]: sqrt(" local.x ") has no real solution"
		local.result = 0.0
	}
	else
	{
		// reduce x to [1,2] domain
		local.wx = local.x
		local.steps = 0
		local.dividesteps = 0
		
		// reduce below 2.0
		while (local.wx > 2.0)
		{
			local.wx = 0.5 * local.wx
			local.steps++
		}
		
		// increase above 1.0
		while(local.wx < 1.0)
		{
			local.wx = 2.0 * local.wx
			local.dividesteps++
		}
		
		// evaluate in [1,2] domain
		if(local.wx == 1.0)
		{
			local.eval = 1.0
		}
		else if (local.wx == 2.0)
		{
			local.eval = local.SQRT_2
		}
		else
		{
			// approximation
			local.EVALSLOPE = 0.4267766953
			local.EVALMOD = 1.224744871 - 1.51 * local.EVALSLOPE
			local.eval = local.EVALSLOPE * local.wx + local.EVALMOD
		}
		
		// multiply back to original domain
		for(local.i = 1; local.i <= local.steps; local.i++)
		{
			local.eval = local.eval * local.SQRT_2
		}
		
		// divide back to original domain
		for(local.i = 1; local.i <= local.dividesteps; local.i++)
		{
			local.eval = local.eval / local.SQRT_2
		}
	
		// correct until required accuracy has been reached
		local.MAXREFINEMENTSTEPS = 2;

		for(local.i = 1; local.i <= local.MAXREFINEMENTSTEPS; local.i++)
		{
			local.fact = local.eval * local.eval / local.x
			local.eval = local.eval / (waitthread sqrt1 local.fact)
		}
		
		local.result = local.eval
	}
end local.result

// fast square-root
// only usuable near x=1
// great for normalizing
sqrt1 local.x:
	// McLaurin expansion
	local.result = 0.5 + 0.5 * local.x - 0.125 * (local.x - 1.0) * (local.x - 1.0)
end local.result

//-------------------------------------------------------------------
// Written by: Veers [HUN]
//-------------------------------------------------------------------

// x in degrees
alt_sin local.x:
	local.angles = ( local.x 0.0 0.0 )
	local.vector = angles_toup local.angles
end local.vector[0]

alt_cos local.x:
	local.angles = ( local.x 0.0 0.0 )
	local.vector = angles_toforward local.angles
end local.vector[0]

alt_tan local.x:
	local.multiplier = 1.0
	if (local.x < 0.0)
		local.multiplier = -1.0 * local.multiplier

	// [0,360] interval
	while (local.x < 360.0)
		local.x += 360.0

	while (local.x > 360.0)
		local.x -= 360.0

	if (local.x == 90.0)
		local.x = 89.99 * local.multiplier
	else if (local.x == 270.0)
		local.x = 269.99 * local.multiplier

	local.sin = waitthread sin local.x
	local.cos = waitthread cos local.x
end (local.sin / local.cos)

cot local.x:
	local.multiplier = 1.0
	if (local.x < 0.0)
		local.multiplier = -1.0 * local.multiplier

	// [0,360] interval
	while (local.x < 360.0)
		local.x += 360.0

	while (local.x > 360.0)
		local.x -= 360.0

	if ( local.x == 0.0 || local.x == 360.0 )
		local.x = 359.99 * local.multiplier
	else if (local.x == 180.0)
		local.x = 179.99 * local.multiplier

	local.sin = waitthread sin local.x
	local.cos = waitthread cos local.x
end (local.cos / local.sin)

// inverse trigonometric functions
alt_arcsin local.x:
	if ( local.x < -1.0 || local.x > 1.0 )
		end 0.0
end ( waitthread atan2 local.x ( waitthread sqrt (1.0 - local.x * local.x) ) )

alt_arccos local.x:
	if ( local.x < -1.0 || local.x > 1.0 )
		end 0.0
end ( waitthread atan2 ( waitthread sqrt (1.0 - local.x * local.x) ) local.x )

arctan local.x:
	if (local.x == 1.0)
		end 45.0
	else if (local.x == -1.0)
		end -45.0

	if (level.PI == NIL)
		level.PI = 3.141592654

	local.num = local.x
	local.x = abs local.x

	local.x2 = local.x * local.x
	local.x3 = local.x * local.x2
	local.x5 = local.x3 * local.x2
	local.x7 = local.x5 * local.x2
	local.x9 = local.x7 * local.x2
	local.x11 = local.x9 * local.x2
	local.x13 = local.x11 * local.x2
	local.x15 = local.x13 * local.x2
	local.x17 = local.x15 * local.x2
	local.x19 = local.x17 * local.x2
	local.x21 = local.x19 * local.x2
	local.x23 = local.x21 * local.x2
	local.x25 = local.x23 * local.x2
	local.x27 = local.x25 * local.x2
	local.x29 = local.x27 * local.x2
	local.x31 = local.x29 * local.x2
	local.x33 = local.x31 * local.x2
	local.x35 = local.x33 * local.x2
	local.x37 = local.x35 * local.x2
	local.x39 = local.x37 * local.x2
	local.x41 = local.x39 * local.x2
	local.x43 = local.x41 * local.x2
	local.x45 = local.x43 * local.x2
	local.x47 = local.x45 * local.x2
	local.x49 = local.x47 * local.x2
	local.x51 = local.x49 * local.x2
	local.x53 = local.x51 * local.x2
	local.x55 = local.x53 * local.x2
	local.x57 = local.x55 * local.x2
	local.x59 = local.x57 * local.x2
	local.x61 = local.x59 * local.x2
	local.x63 = local.x61 * local.x2
	local.x65 = local.x63 * local.x2
	local.x67 = local.x65 * local.x2
	local.x69 = local.x67 * local.x2
	local.x71 = local.x69 * local.x2
	local.x73 = local.x71 * local.x2
	local.x75 = local.x73 * local.x2
	local.x77 = local.x75 * local.x2
	local.x79 = local.x77 * local.x2
	local.x81 = local.x79 * local.x2
	local.x83 = local.x81 * local.x2
	local.x85 = local.x83 * local.x2
	local.x87 = local.x85 * local.x2
	local.x89 = local.x87 * local.x2
	local.x91 = local.x89 * local.x2
	local.x93 = local.x91 * local.x2
	local.x95 = local.x93 * local.x2
	local.x97 = local.x95 * local.x2
	local.x99 = local.x97 * local.x2
	local.x101 = local.x99 * local.x2
	local.x103 = local.x101 * local.x2
	local.x105 = local.x103 * local.x2
	local.x107 = local.x105 * local.x2
	local.x109 = local.x107 * local.x2
	local.x111 = local.x109 * local.x2
	local.x113 = local.x111 * local.x2
	local.x115 = local.x113 * local.x2
	local.x117 = local.x115 * local.x2
	local.x119 = local.x117 * local.x2
	local.x121 = local.x119 * local.x2
	local.x123 = local.x121 * local.x2
	local.x125 = local.x123 * local.x2
	local.x127 = local.x125 * local.x2
	local.x129 = local.x127 * local.x2
	local.x131 = local.x129 * local.x2
	local.x133 = local.x131 * local.x2
	local.x135 = local.x133 * local.x2
	local.x137 = local.x135 * local.x2
	local.x139 = local.x137 * local.x2
	local.x141 = local.x139 * local.x2
	local.x143 = local.x141 * local.x2
	local.x145 = local.x143 * local.x2
	local.x147 = local.x145 * local.x2
	local.x149 = local.x147 * local.x2
	local.x151 = local.x149 * local.x2
	local.x153 = local.x151 * local.x2
	local.x155 = local.x153 * local.x2
	local.x157 = local.x155 * local.x2
	local.x159 = local.x157 * local.x2
	local.x161 = local.x159 * local.x2
	local.x163 = local.x161 * local.x2
	local.x165 = local.x163 * local.x2
	local.x167 = local.x165 * local.x2
	local.x169 = local.x167 * local.x2
	local.x171 = local.x169 * local.x2
	local.x173 = local.x171 * local.x2
	local.x175 = local.x173 * local.x2
	local.x177 = local.x175 * local.x2
	local.x179 = local.x177 * local.x2
	local.x181 = local.x179 * local.x2
	local.x183 = local.x181 * local.x2
	local.x185 = local.x183 * local.x2
	local.x187 = local.x185 * local.x2
	local.x189 = local.x187 * local.x2
	local.x191 = local.x189 * local.x2
	local.x193 = local.x191 * local.x2
	local.x195 = local.x193 * local.x2
	local.x197 = local.x195 * local.x2
	local.x199 = local.x197 * local.x2
	local.x201 = local.x199 * local.x2
	local.x203 = local.x201 * local.x2
	local.x205 = local.x203 * local.x2
	local.x207 = local.x205 * local.x2
	local.x209 = local.x207 * local.x2
	local.x211 = local.x209 * local.x2
	local.x213 = local.x211 * local.x2
	local.x215 = local.x213 * local.x2
	local.x217 = local.x215 * local.x2
	local.x219 = local.x217 * local.x2
	local.x221 = local.x219 * local.x2
	local.x223 = local.x221 * local.x2
	local.x225 = local.x223 * local.x2
	local.x227 = local.x225 * local.x2
	local.x229 = local.x227 * local.x2
	local.x231 = local.x229 * local.x2
	local.x233 = local.x231 * local.x2
	local.x235 = local.x233 * local.x2
	local.x237 = local.x235 * local.x2
	local.x239 = local.x237 * local.x2
	local.x241 = local.x239 * local.x2
	local.x243 = local.x241 * local.x2
	local.x245 = local.x243 * local.x2
	local.x247 = local.x245 * local.x2
	local.x249 = local.x247 * local.x2
	local.x251 = local.x249 * local.x2
	local.x253 = local.x251 * local.x2

	if (local.x < 0.983)
	{
		// MacLaurin series formula
		local.value = local.x - local.x3 / 3.0 + local.x5 / 5.0 - local.x7 / 7.0 + local.x9 / 9.0 - local.x11 / 11.0 + local.x13 / 13.0 - local.x15 / 15.0 + local.x17 / 17.0 - local.x19 / 19.0 + local.x21 / 21.0 - local.x23 / 23.0 + local.x25 / 25.0 - local.x27 / 27.0 + local.x29 / 29.0 - local.x31 / 31.0 + local.x33 / 33.0 - local.x35 / 35.0 + local.x37 / 37.0 - local.x39 / 39.0 + local.x41 / 41.0 - local.x43 / 43.0 + local.x45 / 45.0 - local.x47 / 47.0 + local.x49 / 49.0 - local.x51 / 51.0 + local.x53 / 53.0 - local.x55 / 55.0 + local.x57 / 57.0 - local.x59 / 59.0
		local.value = local.value + local.x61 / 61.0 - local.x63 / 63.0 + local.x65 / 65.0 - local.x67 / 67.0 + local.x69 / 69.0 - local.x71 / 71.0 + local.x73 / 73.0 - local.x75 / 75.0 + local.x77 / 77.0 - local.x79 / 79.0 + local.x81 / 81.0 - local.x83 / 83.0 + local.x85 / 85.0 - local.x87 / 87.0 + local.x89 / 89.0 - local.x91 / 91.0 + local.x93 / 93.0 - local.x95 / 95.0 + local.x97 / 97.0 - local.x99 / 99.0 + local.x101 / 101.0 - local.x103 / 103.0 + local.x105 / 105.0 - local.x107 / 107.0 + local.x109 / 109.0 - local.x111 / 111.0 + local.x113 / 113.0 - local.x115 / 115.0
		local.value = local.value + local.x117 / 117.0 - local.x119 / 119.0 + local.x121 / 121.0 - local.x123 / 123.0 + local.x125 / 125.0 - local.x127 / 127.0 + local.x129 / 129.0 - local.x131 / 131.0 + local.x133 / 133.0 - local.x135 / 135.0 + local.x137 / 137.0 - local.x139 / 139.0 + local.x141 / 141.0 - local.x143 / 143.0 + local.x145 / 145.0 - local.x147 / 147.0 + local.x149 / 149.0 - local.x151 / 151.0 + local.x153 / 153.0 - local.x155 / 155.0 + local.x157 / 157.0 - local.x159 / 159.0 + local.x161 / 161.0 - local.x163 / 163.0 + local.x165 / 165.0 - local.x167 / 167.0
		local.value = local.value + local.x169 / 169.0 - local.x171 / 171.0 + local.x173 / 173.0 - local.x175 / 175.0 + local.x177 / 177.0 - local.x179 / 179.0 + local.x181 / 181.0 - local.x183 / 183.0 + local.x185 / 185.0 - local.x187 / 187.0 + local.x189 / 189.0 - local.x191 / 191.0 + local.x193 / 193.0 - local.x195 / 195.0 + local.x197 / 197.0 - local.x199 / 199.0 + local.x201 / 201.0 - local.x203 / 203.0 + local.x205 / 205.0 - local.x207 / 207.0 + local.x209 / 209.0 - local.x211 / 211.0 + local.x213 / 213.0 - local.x215 / 215.0 + local.x217 / 217.0 - local.x219 / 219.0
		local.value = local.value + local.x221 / 221.0 - local.x223 / 223.0 + local.x225 / 225.0 - local.x227 / 227.0 + local.x229 / 229.0 - local.x231 / 231.0 + local.x233 / 233.0 - local.x235 / 235.0 + local.x237 / 237.0 - local.x239 / 239.0 + local.x241 / 241.0 - local.x243 / 243.0 + local.x245 / 245.0 - local.x247 / 247.0 + local.x249 / 249.0 - local.x251 / 251.0

		local.arctan = waitthread radians local.value 2
	}
	else if ( local.x >= 0.983 && local.x < 1.0 )
	{
		local.value = waitthread linear_interpolation 0.983 local.x 1.0 44.509 45.0
		if (local.x == 0.983)
			local.arctan = local.value
		else
			local.arctan = local.value + 0.001
	}
	else if ( local.x > 1.0 && local.x <= 1.019 )
	{
		local.value = waitthread linear_interpolation 1.0 local.x 1.019 45.0 45.539
		if (local.x == 1.019)
			local.arctan = local.value
		else
			local.arctan = local.value + 0.001
	}
	else if (local.x > 1.019)
	{
		local.value = 0.5 * level.PI - 1.0 / local.x + 1.0 / 3.0 / local.x3 - 1.0 / 5.0 / local.x5 + 1.0 / 7.0 / local.x7 - 1.0 / 9.0 / local.x9 + 1.0 / 11.0 / local.x11 - 1.0 / 13.0 / local.x13 + 1.0 / 15.0 / local.x15 - 1.0 / 17.0 / local.x17 + 1.0 / 19.0 / local.x19 - 1.0 / 21.0 / local.x21 + 1.0 / 23.0 / local.x23 - 1.0 / 25.0 / local.x25 + 1.0 / 27.0 / local.x27 - 1.0 / 29.0 / local.x29 + 1.0 / 31.0 / local.x31 - 1.0 / 33.0 / local.x33 + 1.0 / 35.0 / local.x35 - 1.0 / 37.0 / local.x37 + 1.0 / 39.0 / local.x39 - 1.0 / 41.0 / local.x41
		local.value = local.value + 1.0 / 43.0 / local.x43 - 1.0 / 45.0 / local.x45 + 1.0 / 47.0 / local.x47 - 1.0 / 49.0 / local.x49 + 1.0 / 51.0 / local.x51 - 1.0 / 53.0 / local.x53 + 1.0 / 55.0 / local.x55 - 1.0 / 57.0 / local.x57 + 1.0 / 59.0 / local.x59 - 1.0 / 61.0 / local.x61 + 1.0 / 63.0 / local.x63 - 1.0 / 65.0 / local.x65 + 1.0 / 67.0 / local.x67 - 1.0 / 69.0 / local.x69 + 1.0 / 71.0 / local.x71 - 1.0 / 73.0 / local.x73 + 1.0 / 75.0 / local.x75 - 1.0 / 77.0 / local.x77 + 1.0 / 79.0 / local.x79 - 1.0 / 81.0 / local.x81 + 1.0 / 83.0 / local.x83 - 1.0 / 85.0 / local.x85
		local.value = local.value + 1.0 / 87.0 / local.x87 - 1.0 / 89.0 / local.x89 + 1.0 / 91.0 / local.x91 - 1.0 / 93.0 / local.x93 + 1.0 / 95.0 / local.x95 - 1.0 / 97.0 / local.x97 + 1.0 / 99.0 / local.x99 - 1.0 / 101.0 / local.x101 + 1.0 / 103.0 / local.x103 - 1.0 / 105.0 / local.x105 + 1.0 / 107.0 / local.x107 - 1.0 / 109.0 / local.x109 + 1.0 / 111.0 / local.x111 - 1.0 / 113.0 / local.x113 + 1.0 / 115.0 / local.x115 - 1.0 / 117.0 / local.x117 + 1.0 / 119.0 / local.x119 - 1.0 / 121.0 / local.x121 + 1.0 / 123.0 / local.x123 - 1.0 / 125.0 / local.x125 + 1.0 / 127.0 / local.x127
		local.value = local.value - 1.0 / 129.0 / local.x129 + 1.0 / 131.0 / local.x131 - 1.0 / 133.0 / local.x133 + 1.0 / 135.0 / local.x135 - 1.0 / 137.0 / local.x137 + 1.0 / 139.0 / local.x139 - 1.0 / 141.0 / local.x141 + 1.0 / 143.0 / local.x143 - 1.0 / 145.0 / local.x145 + 1.0 / 147.0 / local.x147 - 1.0 / 149.0 / local.x149 + 1.0 / 151.0 / local.x151 - 1.0 / 153.0 / local.x153 + 1.0 / 155.0 / local.x155 - 1.0 / 157.0 / local.x157 + 1.0 / 159.0 / local.x159 - 1.0 / 161.0 / local.x161 + 1.0 / 163.0 / local.x163 - 1.0 / 165.0 / local.x165 + 1.0 / 167.0 / local.x167 - 1.0 / 169.0 / local.x169
		local.value = local.value + 1.0 / 171.0 / local.x171 - 1.0 / 173.0 / local.x173 + 1.0 / 175.0 / local.x175 - 1.0 / 177.0 / local.x177 + 1.0 / 179.0 / local.x179 - 1.0 / 181.0 / local.x181 + 1.0 / 183.0 / local.x183 - 1.0 / 185.0 / local.x185 + 1.0 / 187.0 / local.x187 - 1.0 / 189.0 / local.x189 + 1.0 / 191.0 / local.x191 - 1.0 / 193.0 / local.x193 + 1.0 / 195.0 / local.x195 - 1.0 / 197.0 / local.x197 + 1.0 / 199.0 / local.x199 - 1.0 / 201.0 / local.x201 + 1.0 / 203.0 / local.x203 - 1.0 / 205.0 / local.x205 + 1.0 / 207.0 / local.x207 - 1.0 / 209.0 / local.x209 + 1.0 / 211.0 / local.x211
		local.value = local.value - 1.0 / 213.0 / local.x213 + 1.0 / 215.0 / local.x215 - 1.0 / 217.0 / local.x217 + 1.0 / 219.0 / local.x219 - 1.0 / 221.0 / local.x221 + 1.0 / 223.0 / local.x223 - 1.0 / 225.0 / local.x225 + 1.0 / 227.0 / local.x227 - 1.0 / 229.0 / local.x229 + 1.0 / 231.0 / local.x231 - 1.0 / 233.0 / local.x233 + 1.0 / 235.0 / local.x235 - 1.0 / 237.0 / local.x237 + 1.0 / 239.0 / local.x239 - 1.0 / 241.0 / local.x241 + 1.0 / 243.0 / local.x243 - 1.0 / 245.0 / local.x245 + 1.0 / 247.0 / local.x247 - 1.0 / 249.0 / local.x249 + 1.0 / 251.0 / local.x251 - 1.0 / 253.0 / local.x253

		local.arctan = waitthread radians local.value 2
	}

	if (local.num < 0.0)
		local.arctan = -1.0 * local.arctan
end local.arctan

arccot local.x:
	if (local.x == 0.0)
		end 0.0
end ( waitthread arctan (1.0 / local.x) )

atan2 local.y local.x:
	if (local.x > 0.0)
	{
		local.atan2 = waitthread arctan (local.y / local.x)
	}
	else if (local.x < 0.0)
	{
		if (local.y >= 0.0)
		{
			local.atan2 = waitthread arctan (local.y / local.x)
			local.atan2 += 180.0
		}
		else
		{
			local.atan2 = waitthread arctan (local.y / local.x)
			local.atan2 -= 180.0
		}
	}
	else
	{
		if (local.y > 0.0)
		{
			local.atan2 = 90.0
		}
		else if (local.y < 0.0)
		{
			local.atan2 = -90.0
		}
		else
		{
			local.atan2 = 0.0
		}
	}
end local.atan2

// enclosed angle by two vectors, result in degrees
enclosed_angle local.a_vector local.b_vector:

	local.vector_dot = vector_dot local.a_vector local.b_vector
	local.a_length = vector_length local.a_vector
	local.b_length = vector_length local.b_vector

	if ( (local.a_length * local.b_length) == 0.0 )
		local.deg = 0.0
	else
	{
		local.alpha = local.vector_dot / (local.a_length * local.b_length)
		local.deg = waitthread arccos local.alpha
	}
end local.deg

linear_interpolation local.a1 local.a2 local.a3 local.b1 local.b3:
	if ( (local.a3 - local.a1) == 0.0 )
		local.b2 = 0.0
	else
		local.b2 = ( (local.b3 - local.b1) / (local.a3 - local.a1) ) * (local.a2 - local.a1) + local.b1
end local.b2

// local.func 1 - degrees to radians, 2 - radians to degrees
radians local.value local.func:
	if (level.PI == NIL)
		level.PI = 3.141592654

	if (local.func == 1)
		local.result = local.value * ( level.PI / 180.0 )
	else if (local.func == 2)
		local.result = local.value * ( 180.0 / level.PI )
end local.result

// natural logarithm, Newton's method
ln local.x:
	if ( local.x < 0.0 || local.x == 0.0 || local.x == 1.0 || local.x > (6600.0 * 10000.0) )
		end 0.0

	if (level.PI == NIL)
		level.PI = 3.141592654

	local.num = local.x
	if (local.num > 6600.0)
		local.x = local.x / 10000.0

	if (local.x <= 45.0)
		local.m = 6
	else if ( local.x > 45.0 && local.x <= 90.0 )
		local.m = 5
	else if ( local.x > 90.0 && local.x <= 135.0 )
		local.m = 4
	else if (local.x > 135.0 && local.x <= 3300.0)
		local.m = 1
	else
		local.m = 0

	local.s = local.x * (waitthread powint 2.0 local.m)
	local.M = 1.0::(4.0 / local.s)
	local.step = 0

	for (local.i = 1;local.i <= 20;local.i++)
	{
		local.step++
		if (local.i == 1)
		{
			local.M_a[local.i] = (local.M[1] + local.M[2]) / 2.0
			local.M_b[local.i] = waitthread sqrt (local.M[1] * local.M[2])
		}
		else
		{
			local.M_a[local.i] = (local.M_a[local.i - 1] + local.M_b[local.i - 1]) / 2.0
			local.M_b[local.i] = waitthread sqrt (local.M_a[local.i - 1] * local.M_b[local.i - 1])
		}
	}

	if (local.M_a[local.step] > local.M_b[local.step])
		local.M_result = local.M_b[local.step]
	else
		local.M_result = local.M_a[local.step]

	local.ln2 = 0.69314718
	local.result = ( level.PI / (2.0 * local.M_result) ) - local.m * local.ln2

	if (local.num > 6600.0)
	{
		local.ln10 = 2.302585093
		local.result = local.result + 4 * local.ln10
	}
end local.result

// log10
log10 local.x:
	local.ln10 = 2.302585093
	local.result = (waitthread ln local.x) / local.ln10

end local.result

powint local.x local.n:
	if (local.n == 0.0)
		end 1.0

	local.num = local.x
	local.result = local.x
	local.step = 0

	while ( local.step < ( (abs local.n) - 1 ) )
	{
		local.result = local.result * local.num
		local.step++
	}

	if (local.n < 0.0)
		local.result = 1.0 / local.result
end local.result

// Bakhshali approximation
// indian mathematical manuscript
alt_sqrt local.x:
	if (local.x < 0.0)
		end 0.0

	local.num = local.x

	// reducing below the accurate squares
	while ( local.num * local.num > local.x )
		local.num = 0.1 * local.num

	local.num_add = local.num

	// increasing to the environment of the accurate squares
	while ( local.num * local.num < local.x )
		local.num += local.num_add

	local.num -= local.num_add

	// more accurate approximation to the real squares
	while ( local.num * local.num < local.x )
		local.num += 0.1 * local.num_add

	local.S = local.x
	local.N = local.num
	local.divisor = 4.0 * local.N * local.N * local.N + 4.0 * local.N * local.S

	if (local.divisor == 0.0)
		end 0.0
	else
	{
		// Bakhshali approximation
		local.result = (local.N * local.N * local.N * local.N + 6.0 * local.N * local.N * local.S + local.S * local.S) / local.divisor
	}
end local.result